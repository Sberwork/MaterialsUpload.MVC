@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Hello Senat team!</h1>
    <p>Learn about <a href="https://sber.ru">building Web apps with ASP.NET Core</a>.</p>
</div>
<div>     <h2>Задание. API для работы с материалами с поддержкой версионирования
    </h2>
    <p>   Материал – это документ с поддержкой версионирования. Материал состоит из одной или множества версий. Каждый материал обязательно имеет категорию, которая указывается пользователем при его создании. Возможные категории:
        <ul class="text-left">
            <li> Презентация</li>
            <li> Приложение</li>
            <li> Другое</li>
        </ul>
        
        <p>
            Версия материала – это файл. Однажды загруженный, он не изменяем. При загрузке версии присваивается порядковый номер, начиная с единицы. По каждой версии необходимо фиксировать некоторые метаданные:
        </p>
        <ul class="text-left"><li>	Когда версия была загружена (дата и время)
            </li>
            <li>Размер загруженного файла</li>
        </ul>
        Необходимо спроектировать и реализовать следующие кейсы:
        <ul class="text-left">
            <li>Загрузка файла на сервер как нового материала.</li>
            <li>	Загрузка файла на сервер в качестве новой версии существующего материала.</li>
            <li>Получение списка информации по материалам с фильтрацией</li>
            <li>Получение информации о материале</li>
            <li>Скачивание актуальной версии материала</li>
            <li>Скачивание отдельной версии материала.</li>
            <li>Изменение категории материалов</li>
        </ul>
        Кейсы должны быть реализованы в виде WebApi, желательно в виде REST-сервиса.
        <br/>
        Реализовать постоянное хранение материалов в БД (метаданных), используя Entity Framework.
        <br />
        Файлы (блобы) должны храниться в локальном каталоге на сервере, который должен быть задан через web.config. При этом известно, что хранилище в будущем может быть изменено на FTP или даже на интеграцию с 3d party-сервисом по http. Необходимо иметь гибкий механизм, который позволит выполнить переход с минимальными трудозатратами.
        <br />
        Ограничений по расширениям файлов нет, по размеру – не более 2ГБ.
        <br />
        Реализованный API необходимо покрыть тестами. Unit/не Unit, а так же степень покрытия – на усмотрение кандидата.
    </p>
</div>
